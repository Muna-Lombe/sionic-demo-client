{"version":3,"file":"static/js/9.cad84f54.chunk.js","mappings":"iNAuFA,UA7Ee,WAGb,IAAMA,GAAQC,EAAAA,EAAAA,KAAYC,EAAAA,EAAAA,OAMpBC,EAAgB,SAACC,GACrB,IAAMC,EAAsBC,OAAOC,OAAO,MAU1C,OATEH,EAAOI,SAAQ,SAACC,GACbJ,EAAoBI,EAAGC,QAAQC,MAAMC,MAEtCP,EAAoBI,EAAGC,QAAQC,MAAMC,MAAMC,KAAKJ,GAE9CJ,EAAoBI,EAAGC,QAAQC,MAAMC,MAAQ,CAACH,EAGnD,IACMJ,CACR,EAIKS,EAAe,SAACH,GACpB,OAAGL,OAAOS,KAAKJ,GAAOK,OAAS,EAAU,GAClCV,OAAOS,KAAKJ,GAAOM,KAAI,SAAAC,GAAS,MACjC,CAAEA,UAAUA,EACVC,OAAQR,EAAMO,GAClBE,wBAAyBT,EAAMO,GAAWD,KAAI,SAACI,GAC3B,OAAQA,EAAUX,QAAQY,aAAcD,EAAUX,QAAQY,aAAeD,EAAUE,aAAeF,EAAUX,QAAQc,MAAQH,EAAUE,YACrJ,IAAEE,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,CAAd,IAAiBC,QAAQ,GALJ,GASxC,EAEKC,EAAS,SAACC,EAAWC,GACzB,IAAMC,EAAiB,SAACC,GAAD,OAAOF,EAAcG,MAAK,SAAAC,GAAE,OAAIA,EAAGC,SAASH,EAAEI,WAAWC,WAA7B,GAA5B,EAMvB,OAAOhC,OAAOiC,QAAQT,GAAWb,KALX,SAAC,GAAS,IAAD,eAAPuB,EAAO,KACvBC,EADuB,KACfC,OAAOV,GACrB,GAAIS,EAAIzB,OAAQ,MAAO,CAACwB,EAAEC,EAC3B,IAEoDC,QADjC,SAAAT,GAAC,YAAQU,IAAJV,CAAJ,GAEtB,EAEKW,EAAQ9B,EACER,OAAOuC,YACLhB,EACE1B,EACEG,OAAOwC,OAAO9C,IACb,CAAC+C,EAAAA,EAAAA,QAAeA,EAAAA,EAAAA,oBAIjCC,EAAMlC,EACER,OAAOuC,YACHhB,EACE1B,EACEG,OAAOwC,OAAO9C,IACd,CAAC+C,EAAAA,EAAAA,qBAMrB,OACE,+BACE,SAAC,EAAAE,SAAD,CAAUC,UAAU,SAAC,KAAD,IAApB,UACE,SAAC,KAAD,CAAMN,MAAOA,EAAOI,IAAKA,OAIlC,C","sources":["pages/Basket.jsx"],"sourcesContent":["import React, { Suspense } from 'react'\nimport { useSelector } from 'react-redux'\nimport { Cart, NoItems } from '../components'\nimport { cartItemAdded, itemsInCart, selectCartItems } from '../js/slices/cart/cartSlice'\nimport { selectProductIds } from '../js/slices/products/productsSlice'\nimport { Outlet } from 'react-router-dom'\nimport { filteredCartItemsFromModel, filteredOrdersFromModel } from '../orm/selectors'\nimport types from '../orm/actions/actionTypes'\nimport { calcDisc } from '../orm/utilities'\n\nconst Basket = () => {\n\n  // recieve the state\n  const items = useSelector(filteredCartItemsFromModel()) //useSelector(state => state.cart.entities)\n  // const testItems = useSelector(filteredOrdersFromModel([]))\n  // console.log(\"test\", items)\n  // convert received state to array of state\n  \n  // filter it by store\n  const filterByStore = (ordItm) =>{\n    const filteredStoreObject = Object.create(null)\n      ordItm.forEach((fp)=>{\n      if(filteredStoreObject[fp.product.store.name]){\n\n        filteredStoreObject[fp.product.store.name].push(fp) \n      }else{\n          filteredStoreObject[fp.product.store.name] = [fp]\n      }\n      \n    })\n    return filteredStoreObject\n  }\n\n  // seperate it by ordered and not ordered status\n\n  const addTotalCost = (store)=>{\n    if(Object.keys(store).length < 1) return []\n    return Object.keys(store).map(storeName => (\n          { storeName:storeName, \n            orders: store[storeName],\n        currentCummulativeTotal: store[storeName].map((orderItem) => {\n                            return (orderItem.product.isDiscounted? orderItem.product.isDiscounted * orderItem.productCount : orderItem.product.price * orderItem.productCount)\n            }).reduce((a, b) => a + b).toFixed(1)\n          })\n    )\n    // return { ...store, totalPrice: totalPrice }\n  }\n\n  const sortBy = (cartItems, orderStatuses) => {\n    const matchingStatus = (i) => orderStatuses.some(os => os.includes(i.ItemStatus.toString()))\n    const filterByStatus =([k,v])=>{\n      const itm = v.filter(matchingStatus)\n      if (itm.length) return [k,itm]\n    } \n    const noUndefined = i => i!==undefined\n    return Object.entries(cartItems).map(filterByStatus).filter(noUndefined) \n  } \n\n  const unOrd = addTotalCost(\n                  Object.fromEntries(\n                    sortBy(\n                      filterByStore(\n                        Object.values(items)\n                      ), [types.IN_CART, types.ORDERED_PENDING]\n                    )\n                  )\n                )\n  const ord = addTotalCost(\n                Object.fromEntries(\n                    sortBy(\n                      filterByStore(\n                        Object.values(items)\n                      ),[types.ORDERED_COMPLETE]\n                    )\n                )\n              )\n    \n  // console.log('test items',unOrd,'\\n',ord)\n    return (\n      <>\n        <Suspense fallback={<NoItems />}>\n          <Cart unOrd={unOrd} ord={ord}/>\n        </Suspense>\n      </>\n    )\n}\n\nexport default Basket"],"names":["items","useSelector","filteredCartItemsFromModel","filterByStore","ordItm","filteredStoreObject","Object","create","forEach","fp","product","store","name","push","addTotalCost","keys","length","map","storeName","orders","currentCummulativeTotal","orderItem","isDiscounted","productCount","price","reduce","a","b","toFixed","sortBy","cartItems","orderStatuses","matchingStatus","i","some","os","includes","ItemStatus","toString","entries","k","itm","filter","undefined","unOrd","fromEntries","values","types","ord","Suspense","fallback"],"sourceRoot":""}